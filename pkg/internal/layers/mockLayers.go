// Code generated by MockGen. DO NOT EDIT.
// Source: layers.go

// Package layers is a generated GoMock package.
package layers

import (
	context "context"
	v1alpha1 "github.com/fidelity/kraan/pkg/api/v1alpha1"
	versioned "github.com/fluxcd/helm-operator/pkg/client/clientset/versioned"
	logr "github.com/go-logr/logr"
	gomock "github.com/golang/mock/gomock"
	kubernetes "k8s.io/client-go/kubernetes"
	reflect "reflect"
	time "time"
)

// MockLayer is a mock of Layer interface
type MockLayer struct {
	ctrl     *gomock.Controller
	recorder *MockLayerMockRecorder
}

// MockLayerMockRecorder is the mock recorder for MockLayer
type MockLayerMockRecorder struct {
	mock *MockLayer
}

// NewMockLayer creates a new mock instance
func NewMockLayer(ctrl *gomock.Controller) *MockLayer {
	mock := &MockLayer{ctrl: ctrl}
	mock.recorder = &MockLayerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLayer) EXPECT() *MockLayerMockRecorder {
	return m.recorder
}

// StatusReady mocks base method
func (m *MockLayer) StatusReady() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StatusReady")
}

// StatusReady indicates an expected call of StatusReady
func (mr *MockLayerMockRecorder) StatusReady() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusReady", reflect.TypeOf((*MockLayer)(nil).StatusReady))
}

// StatusApplying mocks base method
func (m *MockLayer) StatusApplying() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StatusApplying")
}

// StatusApplying indicates an expected call of StatusApplying
func (mr *MockLayerMockRecorder) StatusApplying() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusApplying", reflect.TypeOf((*MockLayer)(nil).StatusApplying))
}

// StatusApply mocks base method
func (m *MockLayer) StatusApply() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StatusApply")
}

// StatusApply indicates an expected call of StatusApply
func (mr *MockLayerMockRecorder) StatusApply() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusApply", reflect.TypeOf((*MockLayer)(nil).StatusApply))
}

// StatusApplyPending mocks base method
func (m *MockLayer) StatusApplyPending() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StatusApplyPending")
}

// StatusApplyPending indicates an expected call of StatusApplyPending
func (mr *MockLayerMockRecorder) StatusApplyPending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusApplyPending", reflect.TypeOf((*MockLayer)(nil).StatusApplyPending))
}

// StatusPrunePending mocks base method
func (m *MockLayer) StatusPrunePending() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StatusPrunePending")
}

// StatusPrunePending indicates an expected call of StatusPrunePending
func (mr *MockLayerMockRecorder) StatusPrunePending() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusPrunePending", reflect.TypeOf((*MockLayer)(nil).StatusPrunePending))
}

// StatusPrune mocks base method
func (m *MockLayer) StatusPrune() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StatusPrune")
}

// StatusPrune indicates an expected call of StatusPrune
func (mr *MockLayerMockRecorder) StatusPrune() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusPrune", reflect.TypeOf((*MockLayer)(nil).StatusPrune))
}

// StatusPruning mocks base method
func (m *MockLayer) StatusPruning() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StatusPruning")
}

// StatusPruning indicates an expected call of StatusPruning
func (mr *MockLayerMockRecorder) StatusPruning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusPruning", reflect.TypeOf((*MockLayer)(nil).StatusPruning))
}

// StatusDeployed mocks base method
func (m *MockLayer) StatusDeployed(reason, message string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StatusDeployed", reason, message)
}

// StatusDeployed indicates an expected call of StatusDeployed
func (mr *MockLayerMockRecorder) StatusDeployed(reason, message interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StatusDeployed", reflect.TypeOf((*MockLayer)(nil).StatusDeployed), reason, message)
}

// IsHold mocks base method
func (m *MockLayer) IsHold() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsHold")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsHold indicates an expected call of IsHold
func (mr *MockLayerMockRecorder) IsHold() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsHold", reflect.TypeOf((*MockLayer)(nil).IsHold))
}

// SetHold mocks base method
func (m *MockLayer) SetHold() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetHold")
}

// SetHold indicates an expected call of SetHold
func (mr *MockLayerMockRecorder) SetHold() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHold", reflect.TypeOf((*MockLayer)(nil).SetHold))
}

// GetStatus mocks base method
func (m *MockLayer) GetStatus() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetStatus indicates an expected call of GetStatus
func (mr *MockLayerMockRecorder) GetStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockLayer)(nil).GetStatus))
}

// GetName mocks base method
func (m *MockLayer) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName
func (mr *MockLayerMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockLayer)(nil).GetName))
}

// GetNamespace mocks base method
func (m *MockLayer) GetNamespace() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetNamespace indicates an expected call of GetNamespace
func (mr *MockLayerMockRecorder) GetNamespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockLayer)(nil).GetNamespace))
}

// GetLogger mocks base method
func (m *MockLayer) GetLogger() logr.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLogger")
	ret0, _ := ret[0].(logr.Logger)
	return ret0
}

// GetLogger indicates an expected call of GetLogger
func (mr *MockLayerMockRecorder) GetLogger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLogger", reflect.TypeOf((*MockLayer)(nil).GetLogger))
}

// GetK8sClient mocks base method
func (m *MockLayer) GetK8sClient() *kubernetes.Clientset {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetK8sClient")
	ret0, _ := ret[0].(*kubernetes.Clientset)
	return ret0
}

// GetK8sClient indicates an expected call of GetK8sClient
func (mr *MockLayerMockRecorder) GetK8sClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetK8sClient", reflect.TypeOf((*MockLayer)(nil).GetK8sClient))
}

// GetHelmReleaseClient mocks base method
func (m *MockLayer) GetHelmReleaseClient() *versioned.Clientset {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHelmReleaseClient")
	ret0, _ := ret[0].(*versioned.Clientset)
	return ret0
}

// GetHelmReleaseClient indicates an expected call of GetHelmReleaseClient
func (mr *MockLayerMockRecorder) GetHelmReleaseClient() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHelmReleaseClient", reflect.TypeOf((*MockLayer)(nil).GetHelmReleaseClient))
}

// GetContext mocks base method
func (m *MockLayer) GetContext() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContext")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// GetContext indicates an expected call of GetContext
func (mr *MockLayerMockRecorder) GetContext() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContext", reflect.TypeOf((*MockLayer)(nil).GetContext))
}

// GetSourcePath mocks base method
func (m *MockLayer) GetSourcePath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSourcePath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetSourcePath indicates an expected call of GetSourcePath
func (mr *MockLayerMockRecorder) GetSourcePath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSourcePath", reflect.TypeOf((*MockLayer)(nil).GetSourcePath))
}

// IsReadyToProcess mocks base method
func (m *MockLayer) IsReadyToProcess() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsReadyToProcess")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsReadyToProcess indicates an expected call of IsReadyToProcess
func (mr *MockLayerMockRecorder) IsReadyToProcess() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsReadyToProcess", reflect.TypeOf((*MockLayer)(nil).IsReadyToProcess))
}

// GetInterval mocks base method
func (m *MockLayer) GetInterval() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInterval")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetInterval indicates an expected call of GetInterval
func (mr *MockLayerMockRecorder) GetInterval() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInterval", reflect.TypeOf((*MockLayer)(nil).GetInterval))
}

// GetTimeout mocks base method
func (m *MockLayer) GetTimeout() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimeout")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetTimeout indicates an expected call of GetTimeout
func (mr *MockLayerMockRecorder) GetTimeout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimeout", reflect.TypeOf((*MockLayer)(nil).GetTimeout))
}

// IsUpdated mocks base method
func (m *MockLayer) IsUpdated() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUpdated")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUpdated indicates an expected call of IsUpdated
func (mr *MockLayerMockRecorder) IsUpdated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUpdated", reflect.TypeOf((*MockLayer)(nil).IsUpdated))
}

// NeedsRequeue mocks base method
func (m *MockLayer) NeedsRequeue() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NeedsRequeue")
	ret0, _ := ret[0].(bool)
	return ret0
}

// NeedsRequeue indicates an expected call of NeedsRequeue
func (mr *MockLayerMockRecorder) NeedsRequeue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NeedsRequeue", reflect.TypeOf((*MockLayer)(nil).NeedsRequeue))
}

// IsVersionCurrent mocks base method
func (m *MockLayer) IsVersionCurrent() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsVersionCurrent")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsVersionCurrent indicates an expected call of IsVersionCurrent
func (mr *MockLayerMockRecorder) IsVersionCurrent() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsVersionCurrent", reflect.TypeOf((*MockLayer)(nil).IsVersionCurrent))
}

// IsDelayed mocks base method
func (m *MockLayer) IsDelayed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDelayed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDelayed indicates an expected call of IsDelayed
func (mr *MockLayerMockRecorder) IsDelayed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDelayed", reflect.TypeOf((*MockLayer)(nil).IsDelayed))
}

// GetDelay mocks base method
func (m *MockLayer) GetDelay() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDelay")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetDelay indicates an expected call of GetDelay
func (mr *MockLayerMockRecorder) GetDelay() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDelay", reflect.TypeOf((*MockLayer)(nil).GetDelay))
}

// CheckPreReqs mocks base method
func (m *MockLayer) CheckPreReqs() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CheckPreReqs")
}

// CheckPreReqs indicates an expected call of CheckPreReqs
func (mr *MockLayerMockRecorder) CheckPreReqs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckPreReqs", reflect.TypeOf((*MockLayer)(nil).CheckPreReqs))
}

// SetRequeue mocks base method
func (m *MockLayer) SetRequeue() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRequeue")
}

// SetRequeue indicates an expected call of SetRequeue
func (mr *MockLayerMockRecorder) SetRequeue() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRequeue", reflect.TypeOf((*MockLayer)(nil).SetRequeue))
}

// SetDelayed mocks base method
func (m *MockLayer) SetDelayed() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDelayed")
}

// SetDelayed indicates an expected call of SetDelayed
func (mr *MockLayerMockRecorder) SetDelayed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDelayed", reflect.TypeOf((*MockLayer)(nil).SetDelayed))
}

// SetUpdated mocks base method
func (m *MockLayer) SetUpdated() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUpdated")
}

// SetUpdated indicates an expected call of SetUpdated
func (mr *MockLayerMockRecorder) SetUpdated() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUpdated", reflect.TypeOf((*MockLayer)(nil).SetUpdated))
}

// GetRequiredK8sVersion mocks base method
func (m *MockLayer) GetRequiredK8sVersion() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRequiredK8sVersion")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRequiredK8sVersion indicates an expected call of GetRequiredK8sVersion
func (mr *MockLayerMockRecorder) GetRequiredK8sVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRequiredK8sVersion", reflect.TypeOf((*MockLayer)(nil).GetRequiredK8sVersion))
}

// CheckK8sVersion mocks base method
func (m *MockLayer) CheckK8sVersion() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckK8sVersion")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckK8sVersion indicates an expected call of CheckK8sVersion
func (mr *MockLayerMockRecorder) CheckK8sVersion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckK8sVersion", reflect.TypeOf((*MockLayer)(nil).CheckK8sVersion))
}

// GetFullStatus mocks base method
func (m *MockLayer) GetFullStatus() *v1alpha1.AddonsLayerStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFullStatus")
	ret0, _ := ret[0].(*v1alpha1.AddonsLayerStatus)
	return ret0
}

// GetFullStatus indicates an expected call of GetFullStatus
func (mr *MockLayerMockRecorder) GetFullStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFullStatus", reflect.TypeOf((*MockLayer)(nil).GetFullStatus))
}

// GetSpec mocks base method
func (m *MockLayer) GetSpec() *v1alpha1.AddonsLayerSpec {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpec")
	ret0, _ := ret[0].(*v1alpha1.AddonsLayerSpec)
	return ret0
}

// GetSpec indicates an expected call of GetSpec
func (mr *MockLayerMockRecorder) GetSpec() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpec", reflect.TypeOf((*MockLayer)(nil).GetSpec))
}

// GetAddonsLayer mocks base method
func (m *MockLayer) GetAddonsLayer() *v1alpha1.AddonsLayer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAddonsLayer")
	ret0, _ := ret[0].(*v1alpha1.AddonsLayer)
	return ret0
}

// GetAddonsLayer indicates an expected call of GetAddonsLayer
func (mr *MockLayerMockRecorder) GetAddonsLayer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAddonsLayer", reflect.TypeOf((*MockLayer)(nil).GetAddonsLayer))
}
