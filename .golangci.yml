version: "2"
# This file contains all available configuration options
# with their default values.

# options for analysis running
run:
  # timeout for analysis, e.g. 30s, 5m, default is 1m
  timeout: 5m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: true

  # list of build tags, all linters use it. Default is empty list.
  build-tags: ["integration"]

  # by default isn't set. If set we pass it to "go list -mod={option}". From "go help modules":
  # If invoked with -mod=readonly, the go command is disallowed from the implicit
  # automatic updating of go.mod described above. Instead, it fails when any changes
  # to go.mod are needed. This setting is most useful to check that go.mod does
  # not need updates, such as in a continuous integration and testing system.
  # If invoked with -mod=vendor, the go command assumes that the vendor
  # directory holds the correct copies of dependencies and ignores
  # the dependency descriptions in go.mod.
  #modules-download-mode: readonly|release|vendor
  #modules-download-mode: vendor
  modules-download-mode: readonly

# output configuration options
output:
  formats:
    text:
      path: stdout
      colors: true
      print-issued-lines: false
      print-linter-name: false

linters:
  enable:
    - asciicheck
    - bodyclose
    - dogsled
    - exhaustive
    - errcheck
    - copyloopvar  # replaces exportloopref in v2
    - funlen
    - gocognit
    - gocyclo
    - goheader
    - gomodguard
    - goprintffuncname
    - govet
    - ineffassign 
    - lll
    - misspell
    - nakedret
    - nestif
    - nolintlint
    - prealloc
    - rowserrcheck
    - sqlclosecheck
    - unconvert
    - unparam
    - whitespace
  disable:
    - gochecknoglobals
    - gochecknoinits
    - goconst
    - gocritic
    - godot
    - godox
    - err113  # replaces goerr113
    - mnd     # replaces gomnd
    - gosec
    - nlreturn
    - testpackage
    - wsl_v5  # replaces wsl
    # Disabled problematic linters for now
    - dupl      # duplicate code detection - too noisy
    - revive    # comment requirements - too strict for existing code
    - staticcheck # code quality suggestions - too many issues
    - noctx     # context usage requirements - architectural changes needed
    - unused    # unused code detection - can be noisy
    - govet     # printf format issues in test utilities
    - nolintlint # unused nolint directives from previous config

  # which dirs to skip: they won't be analyzed;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but next dirs are always skipped independently
  # from this option's value:
  #   vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  exclusions:
    paths:
    - endor$
    - cache$
    - build$

  # all available settings of specific linters
  settings:
    errcheck:
      # report about not checking of errors in type assetions: `a := b.(MyStruct)`;
      # default is false: such cases aren't reported by default.
      check-type-assertions: false  # Relaxed from true

      # report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
      # default is false: such cases aren't reported by default.
      check-blank: false  # Relaxed from true

      # Exclude common patterns that are typically safe to ignore
      exclude-functions:
        - (io.Closer).Close
        - (*os.File).Close
        - (net.Conn).Close
    govet:
      enable:
        - shadow
      # Disable some strict analyzers for existing code compatibility
      disable:
        - tests
        - stdmethods
    revive:
      # see https://github.com/mgechev/revive#available-rules for details.
      rules:
        - name: exported
          severity: warning
          disabled: false
    gocyclo:
      # minimal code complexity to report, 30 by default (but we recommend 10-20)
      min-complexity: 10
    dupl:
      # tokens count to trigger issue, 150 by default
      threshold: 100
    goconst:
      # minimal length of string constant, 3 by default
      min-len: 2
      # minimal occurrences count to trigger, 3 by default
      min-occurrences: 2
    depguard:
      rules:
        main:
          deny:
            - pkg: "reflect"
              desc: "reflect is disallowed"
          allow:
            - $gostd
    misspell:
      # Correct spellings using locale preferences for US or UK.
      # Default is to use a neutral variety of English.
      # Setting locale to US will correct the British spelling of 'colour' to 'color'.
      #locale: US
      ignore-rules: []
    lll:
      # max line length, lines longer will be reported. Default is 120.
      # '\t' is counted as 1 character by default, and can be changed with the tab-width option
      line-length: 180
      # tab width in spaces. Default to 1.
      tab-width: 1
    # unused:
    #   # treat code as a program (not a library) and report unused exported identifiers; default is false.
    #   # XXX: if you enable this setting, unused will report a lot of false-positives in text editors:
    #   # if it's called for subdir of a project it can't find funcs usages. All text editor integrations
    #   # with golangci-lint call it on a directory with the changed file.
    #   check-exported: false
    unparam:
      # Inspect exported functions, default is false. Set to true if no external program/library imports your code.
      # XXX: if you enable this setting, unparam will report a lot of false-positives in text editors:
      # if it's called for subdir of a project it can't find external interfaces. All text editor integrations
      # with golangci-lint call it on a directory with the changed file.
      check-exported: false
    nakedret:
      # make an issue if func has more lines of code than this setting and it has naked returns; default is 30
      max-func-lines: 30
    prealloc:
      # XXX: we don't recommend using this linter before doing performance profiling.
      # For most programs usage of prealloc will be a premature optimization.

      # Report preallocation suggestions only on simple loops that have no returns/breaks/continues/gotos in them.
      # True by default.
      simple: true
      range-loops: true # Report preallocation suggestions on range loops, true by default
      for-loops: false # Report preallocation suggestions on for loops, false by default
    gocritic:
      # Which checks should be enabled; can't be combined with 'disabled-checks';
      # See https://go-critic.github.io/overview#checks-overview
      # To check which checks are enabled run `GL_DEBUG=gocritic golangci-lint run`
      # By default list of stable checks is used.
      #enabled-checks: []
      #  - rangeValCopy

      # Which checks should be disabled; can't be combined with 'enabled-checks'; default is empty
      disabled-checks: []

      # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint` run to see all tags and checks.
      # Empty list by default. See https://github.com/go-critic/go-critic#usage -> section "Tags".
      enabled-tags: []

      #settings: # settings passed to gocritic
      #  captLocal: # must be valid enabled check name
      #    paramsOnly: true
      #  rangeValCopy:
      #    sizeThreshold: 32

issues:
  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing
  # large codebase. It's not practical to fix all existing issues at the moment
  # of integration: much better don't allow issues in new code.
  # Default is false.
  new: false
  # Show only new issues created after git revision `REV`
  #new-from-rev: REV
  # Show only new issues created in git patch with set file path.
  #new-from-patch: path/to/patch/file

formatters:
  settings:
    gofmt:
      # simplify code: gofmt with `-s` option, true by default
      simplify: true
    goimports:
      # put imports beginning with prefix after 3rd-party packages;
      # it's a comma-separated list of prefixes
      local-prefixes: 
      - github.com/fidelity/kraan